<!DOCTYPE html>
<head>

	<h2> Click this button to display the JSON content </h2>
	
</head>

<body>

<button id="click" style="color:red; background-color:blue; border-radius:20px;"> Click me </button>


<table id="table" border="1">
<tr>
<th> firstName </th>
<th> lastName </th>
</tr>
</table> 

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"> </script>
<script src="https://maps.google.com/maps/api/js?sensor=false" 
          type="text/javascript"></script>


<script>
     $(document).ready(function(){
     $("#map").css('visibility', 'hidden');
     $("#table").css('visibility', 'hidden');
     
	$("#click").click(function(){
     $("#map").css('visibility', 'visible');
     $("#table").css('visibility', 'visible');
    $.ajax({
        url: '/json',
	type: 'GET',
        dataType: "json",
	
        success: function(data) {
		console.log("success");
	var txt = '';
	for(var i = 0, size = data.length; i < size ; i++)
	{
   var item = data[i];
   txt = txt + "<tr><td id = td>"+ item.firstName + "</td><td>" + item.lastName+"</td><td>";
   
    } 
    console.log(txt);
    
    var length= $("#table").find('td:td').length;	
	console.log(length);

	if(length==0){
	$("#table").append(txt);
	}

	}
	});
	});
	});

</script>
 
  <div id="map" style="width: 500px; height: 400px;"></div>

  <script type="text/javascript">
    
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 10,
      center: new google.maps.LatLng(-33.92, 151.25),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    var infowindow = new google.maps.InfoWindow();

    var marker, i;

    $.ajax({
        url: '/json',
	type: 'GET',
        dataType: "json",
	
        success: function(data) {
		console.log("success");
	var txt = '';
	for(var i = 0, size = data.length; i < size ; i++)
	{
        
       var item = data[i];
   txt = item['location'];
   var locString=txt.split(',',2);
   var lat=parseFloat(locString[0]);
   var lon=parseFloat(locString[1]);
   marker = new google.maps.Marker({
   position: new google.maps.LatLng(lat, lon),
   map: map
    });
    
     google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
    //      infowindow.setContent(locations[i][0]);
          infowindow.open(map, marker);
        }
      })(marker, i));
    
    }
    }
	});



$.ajax({
            type: "GET",
            
            url: '/json',
            dataType: 'json',
            async: true,
            data: "{}", 
            success: function (data) {
               var pos_data = data;
               div_name = "div.histogram";

        draw_histogram(div_name, pos_data);

            },
            error: function (result) {



}
    })



//The drawing of the histogram has been broken out from the data retrial 
    // or computation. (In this case the 'Irwin-Hall distribution' computation above)

    function draw_histogram(reference, pos_data){

        $(reference).empty()

        //The drawing code needs to reference a responsive elements dimneions
        var width = $(reference).width();
        // var width = $(reference).empty().width(); we can chain for effeicanecy as jquery returns jquery.

        // var height = 230;  // We don't want the height to be responsive.

        var margin = {top: 10, right: 30, bottom: 40, left: 30},
        // width = 960 - margin.left - margin.right,
        height = 270 - margin.top - margin.bottom;


        var histogram = d3.layout.histogram() (pos_data);
        //var neg_histogram = d3.layout.histogram()(neg_data);

        var x = d3.scale.ordinal()
            .domain(histogram.map(function(d) { return d.x; }))
            .rangeRoundBands([0, width]);

        var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");


        var y = d3.scale.linear()
            .domain([0, d3.max(histogram.map(function(d) { return d.y; }))])
            .range([0, height]);

        //var ny = d3.scale.linear()
        //    .domain([0, d3.max(neg_histogram.map(function(d) { return d.y; }))])
        //    .range([0, height]);

        var svg = d3.select(reference).append("svg")
            .attr("width", width)
            .attr("height", height + 20);



        svg.selectAll("rect")
            .data(histogram)
          .enter().append("rect")
            .attr("width", x.rangeBand())
            .attr("x", function(d) { return x(d.x); })
            .attr("y", function(d) { return height - y(d.y); })
            .attr("height", function(d) { return y(d.y); });


        svg.append("line")
            .attr("x1", 0)
            .attr("x2", width)
            .attr("y1", height)
            .attr("y2", height);

        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + (height)  + ")")
            .call(xAxis);
    };

    //Bind the window resize to the draw method.
    //A simple bind example is

    //A better idom for binding with resize is to debounce
    var debounce = function(fn, timeout) 
    {
      var timeoutID = -1;
      return function() {
        if (timeoutID > -1) {
          window.clearTimeout(timeoutID);
        }
        timeoutID = window.setTimeout(fn, timeout);
      }
    };

    var debounced_draw = debounce(function() {
      draw_histogram(div_name, pos_data);
    }, 125);

    $(window).resize(debounced_draw);



</script> 
</body>
</html>  



